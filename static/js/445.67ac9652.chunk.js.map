{"version":3,"file":"static/js/445.67ac9652.chunk.js","mappings":"qKAoBA,IAlBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,QAAQC,KAAI,SAAAC,GAAK,OACvB,yBACE,SAAC,KAAD,CACEC,GAAI,CAAEC,SAAS,WAAD,OAAaF,EAAMG,IAAMC,MAAO,CAAEC,KAAMT,IADxD,SAGGI,EAAMM,kBAJFN,EAAMG,W,wKCPvB,EAA8B,6B,SCU9B,MARA,WACE,OACE,gBAAKI,UAAWC,EAAhB,UACE,SAAC,KAAD,CAAMC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,IAAKC,WAAW,e,SCEjD,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOnB,EAAP,KAAeoB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAEMrB,GAAWC,EAAAA,EAAAA,MACXqB,GAAUC,EAAAA,EAAAA,MACVC,EAAQ,IAAIC,gBAAgBzB,EAAS0B,QAAQC,IAAI,UAEvDC,EAAAA,EAAAA,YAAU,WACR,GAAIJ,EAAO,CACT,IAAMK,EAAW,mCAAG,qFAClBR,GAAW,GADO,SAGZS,EAAAA,GAA2BN,GAAOO,MAAK,SAAAhC,GAC3C,GAA8B,IAA1BA,EAAOG,QAAQ8B,OAGjB,OAFAX,GAAW,GAEJY,EAAAA,GAAAA,QAAc,yBAA0B,CAC7CC,MAAO,YAIXf,EAAUpB,GACVsB,GAAW,MAbK,2CAAH,qDAgBjBQ,OAED,CAACL,IAwBJ,OACE,4BACE,kBAAMW,SAxBW,SAAAC,GACnBA,EAAEC,iBACF,IAAIC,EAAaF,EAAEG,cAAcC,SAAShB,MAAMiB,MAEhD,GAAmB,KAAfH,EAAJ,CAIA,GAA0B,KAAtBA,EAAWI,OACb,OAAOT,EAAAA,GAAAA,QAAc,oBAAqB,CACxCC,MAAO,YAIXZ,EAAQqB,MAAR,kBACK3C,GADL,IAEE0B,OAAO,SAAD,OAAWY,EAAWI,WAG9BN,EAAEG,cAAcK,UAKd,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,YAAY,kBAEd,mBAAQJ,KAAK,SAAb,UACE,SAAC,MAAD,SAIHzB,IAAW,SAAC,EAAD,IACXrB,IAAU,SAACmD,EAAA,EAAD,CAAYnD,OAAQA,S,6ICzE/BoD,G,OAAM,oCACNC,EAAW,gCAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SACyBC,MAAMD,GAD/B,cACQE,EADR,yBAESA,EAASC,GACZD,EAASE,OACTC,QAAQC,OACN,IAAIC,MAAM5B,EAAAA,GAAAA,MAAY,0BAA2B,CAAEC,MAAO,eALlE,mEASO,SAAS4B,IACd,OAAOT,EAAuB,GAAD,OAAID,EAAJ,sCAA0CD,IAGlE,SAASY,EAAeC,GAC7B,OAAOX,EAAuB,GAAD,OACxBD,EADwB,iBACPY,EADO,oBACYb,EADZ,uDAKxB,SAASc,EAAkBnB,GAChC,OAAOO,EAAuB,IAAD,OACvBD,EADuB,gCACSD,EADT,kBACsBL,EADtB","sources":["components/MoviesList/MoviesList.jsx","webpack://goit-react-hw-05-movies/./src/components/Spinner/Spinner.module.css?d43e","components/Spinner/Spinner.jsx","pages/MoviesPage.jsx","services/movie-api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.results.map(movie => (\n        <li key={movie.id}>\n          <Link\n            to={{ pathname: `/movies/${movie.id}`, state: { from: location } }}\n          >\n            {movie.original_title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"SpinnerWrap\":\"Spinner_SpinnerWrap__jifnD\"};","import React from 'react';\nimport { Bars } from 'react-loader-spinner';\nimport styles from './Spinner.module.css';\nfunction Spinner() {\n  return (\n    <div className={styles.SpinnerWrap}>\n      <Bars color=\"#6ea5f8\" height={120} width={120} arialLabel=\"loading\" />\n    </div>\n  );\n}\n\nexport default Spinner;\n","import { React, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { BsSearch } from 'react-icons/bs';\nimport * as movieApi from '../services/movie-api';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Spinner from '../components/Spinner/Spinner';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n  const history = useHistory();\n  const query = new URLSearchParams(location.search).get('query');\n\n  useEffect(() => {\n    if (query) {\n      const fetchSearch = async () => {\n        setLoading(true);\n\n        await movieApi.fetchMovieByQuery(query).then(movies => {\n          if (movies.results.length === 0) {\n            setLoading(false);\n\n            return toast.warning('There is no such movie', {\n              theme: 'colored',\n            });\n          }\n\n          setMovies(movies);\n          setLoading(false);\n        });\n      };\n      fetchSearch();\n    }\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let queryValue = e.currentTarget.elements.query.value;\n\n    if (queryValue === '') {\n      return;\n    }\n\n    if (queryValue.trim() === '') {\n      return toast.warning('Enter movie title', {\n        theme: 'colored',\n      });\n    }\n\n    history.push({\n      ...location,\n      search: `query=${queryValue.trim()}`,\n    });\n\n    e.currentTarget.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search film \"\n        />\n        <button type=\"submit\">\n          <BsSearch />\n        </button>\n      </form>\n\n      {loading && <Spinner />}\n      {movies && <MoviesList movies={movies} />}\n    </div>\n  );\n}\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst KEY = '5fe4e7cb700e0e7e8be54b15a82973ef';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nasync function fetchWithErrorHandling(url = '') {\n  const response = await fetch(url);\n  return response.ok\n    ? response.json()\n    : Promise.reject(\n        new Error(toast.error('Something went wrong :(', { theme: 'colored' }))\n      );\n}\n\nexport function fetchTrandMovie() {\n  return fetchWithErrorHandling(`${BASE_URL}trending/movie/day?api_key=${KEY}`);\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US&append_to_response=reviews,credits`\n  );\n}\n\nexport function fetchMovieByQuery(name) {\n  return fetchWithErrorHandling(\n    ` ${BASE_URL}search/movie?api_key=${KEY}&query=${name}&language=en-US&page=1&include_adult=false`\n  );\n}\n"],"names":["movies","location","useLocation","results","map","movie","to","pathname","id","state","from","original_title","className","styles","color","height","width","arialLabel","MoviesPage","useState","setMovies","loading","setLoading","history","useHistory","query","URLSearchParams","search","get","useEffect","fetchSearch","movieApi","then","length","toast","theme","onSubmit","e","preventDefault","queryValue","currentTarget","elements","value","trim","push","reset","type","name","autoComplete","autoFocus","placeholder","MoviesList","KEY","BASE_URL","fetchWithErrorHandling","url","fetch","response","ok","json","Promise","reject","Error","fetchTrandMovie","fetchMovieById","movieId","fetchMovieByQuery"],"sourceRoot":""}